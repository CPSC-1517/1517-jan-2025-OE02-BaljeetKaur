@page  "/datacollection"
@rendermode InteractiveServer
<PageTitle> Data Collection</PageTitle>

<h3>DataCollection</h3>
<h4> Write data to a CSV file</h4>

@using OOPsReview

<blockquote> This Component demonstares how your page can handle validation messages , once the data is validated, then only data goes to CSV file</blockquote>

<br />

@if (feedbackMessage.Length > 0 )
{
	<div>
		@feedbackMessage
	</div>
}

<!-- 

This area will handle the display of collection of error messages, we are using Dictionary
-->

@if (errorDictionary.Count()>0)
{
	<div class="alert alert-danger"> 
		<p> Please fix following errors</p>
		<ul>
			@foreach ( var message in errorDictionary.Values)
			{
				<li> @message </li>
			}
		</ul>

	</div>

}

<!--
Creat our controls
-->

<fieldset>
	<div>
		<label for="title"> Position Title:  </label>
		<input id="title" type= "text" @bind =employmentTitle />
	</div>

	<div>
		<label for="startdate"> Position Start Date:  </label>
		<input id="startdate" type= "date" @bind=employmentStartDate />
	</div>

	<div>
		<label for="years"> Years:  </label>
		<input id="years" type= "number" @bind=employmentYear step="0.1"/>
	</div>

	<div>
		<label for="level"> Supervisory Level:  </label>
		<select id="level" @bind=employmentLevel>
			@foreach (var item in Enum.GetValues(typeof(SupervisoryLevel)))
			{
				<option value="@item"> @item </option>
			}
		</select>/>
	</div>

	<div>
		<button type="submit" @onclick = "DataProcessing"> Collect Data </button>
	</div>

	<div>
		<button type="submit" @onclick="Clear"> Clear </button>
	</div>

</fieldset>

@code{

	private string feedbackMessage= "Test";

	private Dictionary<string, string> errorDictionary = new();

	private string employmentTitle;
	private SupervisoryLevel employmentLevel;
	private double employmentYear;
	private DateTime employmentStartDate;

	public void Clear()
	{
		feedbackMessage = "";
		errorDictionary.Clear();
		employmentTitle = "";
		employmentLevel = SupervisoryLevel.Entry;
		employmentStartDate = DateTime.Today;
		employmentYear = 0;
	}

	public void DataProcessing()
	{
		feedbackMessage = "";
		errorDictionary.Clear();

		// validate incoming data
		// errorDictionary will hold any message in regard to invalid data

		if(string.IsNullOrWhiteSpace(employmentTitle))
		{
			errorDictionary.Add("Title", "Title is required");
		}

		if (employmentStartDate > DateTime.Today.AddDays(1))
		{
			errorDictionary.Add("Start Date", "Start Date can not be a future date");
		}

		if (!Utilities.IsZeroOrPositive(employmentYear))
		{
			errorDictionary.Add("years", "Experience has to be Positive or 0");
		}

		if (errorDictionary.Count == 0)
		{
			Employment employment = new Employment(employmentTitle, employmentLevel, employmentStartDate, employmentYear);
			feedbackMessage = employment.ToString();
		}
	}






}
