@page "/regionqueries"
<PageTitle>Region Queries</PageTitle>
@rendermode InteractiveServer

@using ClassWestWindsystem.BLL;
@using ClassWestWindsystem.Entity;

<h1>Region Queries</h1>

<br />


@if (feedbackMessage.Length > 0)
{
	<div>
		@feedbackMessage
	</div>
}

<!--

This area will handle the display of collection of error messages, we are using Dictionary
-->
@if (errorDictionary.Count() > 0)
{
	<div class="alert alert-danger">
		<p> Please fix following errors</p>
		<ul>
			@foreach (var message in errorDictionary.Values)
			{
				<li> @message </li>
			}
		</ul>

	</div>

}

<!--Creat our controls--->

<div class="row">
	<div class="col-md-6">
		<!--Left Block-->
		<fieldset>
			<div>
				<label for="regionid"> Enter the Region ID:  </label>
				<input id="regionid" type="number" @bind="regionidarg" />
				<button type="submit" class="btn btn-outline-primary" @onclick="GetByID"> Fetch by Region ID </button>
			</div>

			<div>
				<label for="regionlist"> Select a Region to view:  </label>
				<select id="regionlist" @bind="regionselectarg">
					@foreach (var item in regionlist)
					{
						<option value="@item.RegionID"> @item.RegionDescription </option>
					}
				</select>/>
				<button type="submit" class="btn btn-outline-primary" @onclick="GetByList"> Fetch by selected list item </button>
			</div>

		</fieldset>


	</div>

	<div class="col-md-6">
		<!--Right Block-->

		@if (dataInfo==null)
		{
			<p> No data to display</p>
		}
		else
		{
			<div> 
				<h3> Region Information</h3>
				<p> Region ID: @dataInfo.RegionID</p>
				<p> Region Description: @dataInfo.RegionDescription</p>
			</div>


		}

	</div>

</div>





<h3>RegionQueries</h3>

@code {

	private string feedbackMessage = "";
	private Dictionary<string, string> errorDictionary = new();

	private int regionidarg= 0;
	private int regionselectarg = 0;
	private List<Region> regionlist = new();
	private Region dataInfo = null;

	[Inject]
	RegionServices _regionServices { get; set; }

	public Exception GetInnerException(Exception ex)
	{
		while (ex.InnerException != null)
		{
			ex = ex.InnerException;
		}
		return ex;
	}
	//if you need to assign values to control prior to displaying the page
	//  then you need to do the logic on the page intialization
	protected override void OnInitialized()
	{
		base.OnInitialized();
		//consume the service to get a list of all regions
		regionlist = _regionServices.Region_GetAll();
		
	}


	//Button Click Event
	//metohd should consume the BLL method in RegionServices to get the region by ID 
	private void GetByID()
	{

		feedbackMessage = "";
		errorDictionary.Clear();
		dataInfo = null;

		if (regionidarg <= 0)
		{
			errorDictionary.Add("regionID", "Region ID should be a positive value");
		}
		else
		{
			// consume the service
			//inject the service
			// variable to hold the return value of service call

			dataInfo = _regionServices.Region_GetByID(regionidarg);
		}



	}

	public void GetByList()
	{
		//clear old all old messages and data
		feedbackMessage = "";
		errorDictionary.Clear();
		dataInfo = null;

		//validate incoming values, did I select a region, the prompt is 0
		if (regionselectarg == 0)
		{

			errorDictionary.Add("er1","Please select a region to review.");
		}
		else
		{
			//consume a service
			dataInfo = _regionServices.Region_GetByID(regionselectarg);
		}
	}
}


}
