@page "/shipmentpaging"
<PageTitle>Shipment Table Query Paging</PageTitle>
@rendermode InteractiveServer

<!--

Additional package setup

you will need to add the NuGet package Blazor.BootStrap by vikram reddy (do first)
you will need to add a using statement
using BlazorBootstrap
-->
<!-- additional namespaces-->
@using BlazorBootstrap;
@using ClassWestWindsystem.BLL
@using ClassWestWindsystem.Entity;

<h1>Shipment Query (using paging)</h1>
<h4>... non primary key filter search</h4>

@if (feedBackMsg.Length > 0)
{
    <div class="alert alert-info">
        <p>@feedBackMsg</p>
    </div>
}

@if (errorMsgs.Count > 0)
{
    <div class="alert alert-danger">
        <p>Please fix the following issues:</p>
        <ul>
            @foreach (var error in errorMsgs)
            {
                <li>@error</li>
            }
        </ul>
    </div>
}

<!-- input form and display table-->
<div class="row">
    <div class="col-md-3">
        <!-- input form-->
        <p><strong>Input query values</strong></p>
        <label for="year">Enter a Date:</label>&nbsp;&nbsp;
        <input id="year" type="date" placeholder="enter Date for capturing month and year"
        style="width:100px;" @bind="yearmontharg" />
        <br /><br />

        <button type="submit" @onclick="GetShipments"
        class="btn btn-outline-secondary rounded-pill">
            Fetch By Selection
        </button>
    </div>

    <div class="col-md-9">
        @if (shipmentList == null)
        {
            <p>Enter desired year and month for search</p>
        }
        else
        {
            <p><strong>display of query results</strong></p>
            if (shipmentList.Count == 0)
            {
                <p>No data found for year and month arguments in search</p>
            }
            else
            {
                //table
                //to reduce the number of data rows being displayed there are two techniques
                //a) pagination
                //b) scrolling

                //this example uses the Bootstrap Pagination tag:
                //Required
                //      total records possibly returned: totalItems
                //      total required pages depending on totalItems: GetTotalPage()
                //      current page number: currentPageNumber
                //      items per page: itemsPerPage
                //      collection to hold records that will be displayed


                //the shipment record has a field called ShipVia which is foreign key (1, 2, 3, etc)
                //displaying that is meaningless to someone reading the data unless they were familiar with
                //      the pkey value associated with each company
                //solution: display the company name
                //Problem: the name is in a different table

                //If you look at the entities, records with fields used in sql scheme relationships
                //      have virtual navigational properties (see bottom of entity)
                //These properties allow you to have access to data in the related table

                //How to use

                //When you use the property just treat it as the name of an object so accessing the
                //      desired field in the related table just needs the dot (.) operator
                //In this example, the property is ShipViaNavigation which points to the Shippers table
                //      and the desired field from the Shippers table was CompanyName


                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Order</th>
                            <th>Date</th>
                            <th>Shipper</th>
                            <th>Freight $</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in shipmentList)
                        {
                            <tr>
                                <td>@item.ShipmentID</td>
                                <td>@item.OrderID</td>
                                <td>@item.ShippedDate.ToShortDateString()</td>
                                @*  <td>@item.ShipVia</td> *@
                                <td>@item.ShipViaNavigation.CompanyName</td>
                                <td>@(string.Format("{0:#,##0.00}", item.FreightCharge))</td>
                            </tr>
                        }
                    </tbody>
                </table>

                <!--
                this tag will display 5 page numbers at a time
                it contains the usual First Previous page numbers Next Last layout
                HOWEVER, it does not adjust the page numbers to have a continious
                display of pages like  4 5 6 7 8
                instead it is 1 2 3 4 5 then 6 7 8 9 10 then 11 12 ..
                but if you look at the first/last number there is a small space
                near the top of the display that is empty and can be clicked
                as if it is the expected ... normally displayed

                remember this control tag is TOTALLY independent of the table
                -->
                <Pagination ActivePageNumber="currentPageNumber"
                TotalPages="GetTotalPages()"
                PageChanged="OnPageChanged">
                </Pagination>
            }
        }

    </div>
</div>

@code {
    private string feedBackMsg = "";
    private List<string> errorMsgs = new List<string>();

    //input argument fields
    private DateTime  yearmontharg;
    // private int montharg = 0;

    //output data set
    private List<Shipment> shipmentList = null;

    //injections
    [Inject]
    private ShipmentServices _shipmentServices { get; set; }

    // [Inject]
    // private ShipperServices _shipperServices { get; set; }
    // private List<Shipper> shipperList = null;

    //pagination
    private int totalItems = 0;
    private int currentPageNumber = 1;
    private int itemsPerPage = 10; //is a developer decision

    private Exception GetInnerException(Exception ex)
    {
        //drill down into your Exception until there are no more inner exceptions
        //at this point you will have the "real" reason for the error
        while (ex.InnerException != null)
            ex = ex.InnerException;

        //you now have the real reason for your error (details)
        //return the details to the call
        return ex;
    }

    //events

    protected override void OnInitialized()
    {
        //there are two techniques to allow the use of navigational properties on your page
        //      a) bring in a dataset of the table to which you are attempting to navigate
        //      b) use the .Include method on the query itself (see Shipment query for this technique in BLL ShipmentServices)

        // Technique (a)
        // this data set is needed to handle the navigation reference used on the table data cell
        //           to display the shipper company name
        // no other coding is needed, the system will match up the dataset to the usage in the table above
        //shipperList = _shipperServices.Shipper_GetAll();


        yearmontharg = DateTime.Today;
        //montharg = DateTime.Today.Month;
        base.OnInitialized();
    }

    private void GetShipments()
    {
        feedBackMsg = "";
        errorMsgs.Clear();
        shipmentList = null; //new query, delete old results

        //this is a request for a new query
        //therefore you wish to start on page one of the new query results
        currentPageNumber = 1;

        //validate incoming values
        if (yearmontharg.Year < 1950 || yearmontharg.Year > DateTime.Today.Year)
        {
            throw new ArgumentException($"Invalid year {yearmontharg.Year}. Year must be between 1950 and this year.");
        }
        if (yearmontharg.Month < 1 || yearmontharg.Month > 12)
        {
            throw new ArgumentException($"Invalid month {yearmontharg.Month}. Month must be between 1 and 12.");
        }

        if (errorMsgs.Count == 0)
        {
            //assume incoming values are acceptable
            //consume the server

            //since the consumption could possible throw and exception
            //  we need to use "user friendly error handling" techniques


            try
            {
                //need to call a service for
                //    get the total number of records from on the database
                //    get only the number of records needed to display on the current page
                //          which is the first page for the query parameters
                totalItems = _shipmentServices.Shipment_GetByYearAndMonthCount(yearmontharg);

                shipmentList = _shipmentServices.Shipment_GetByYearAndMonthPaging(yearmontharg, currentPageNumber, itemsPerPage);
            }
            catch (Exception ex)
            {
                errorMsgs.Add($"System Error: {GetInnerException(ex).Message}");
            }
        }
    }

    #region Pagination
    private int GetTotalPages()
    {
        int totalPages = (totalItems + itemsPerPage - 1) / itemsPerPage;
        return totalPages;
    }

    private void OnPageChanged(int newPageNumber)
    {
        //remember to update the current page number to the newly selected page number
        currentPageNumber = newPageNumber;

        //retreive the "page" from requerying your service against the database
        //parameters required
        //  query value parameter(s)
        //  itemPerPage
        //  currentPageNumber
        shipmentList = _shipmentServices.Shipment_GetByYearAndMonthPaging(yearmontharg,currentPageNumber, itemsPerPage);
    }
    #endregion
}
